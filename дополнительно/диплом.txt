Министерство образования и науки Челябинской области
государственное бюджетное профессиональное образовательное учреждение «Челябинский энергетический колледж им С. М. Кирова»
ЗАЩИТА  	  ДОПУЩЕН К ЗАЩИТЕ
Протокол ГЭК № _________	 Зам. директора по УР	
Председатель ГЭК	___________________/ Н. В. Рюб /
_________________/ А.В. Смирнов/	«_____» _______________ 2025 г.
«_____» _______________ 2025 г. 	
Дипломный проект
РЕАЛИЗАЦИЯ МОНИТОРИНГА НА ОСНОВЕ НЕЙРОННЫХ СЕТЕЙ
ЧЭнК.09.02.07.000.007.000.ПЗ 
Консультант:	Разработал:
___________/О. К. Пермякова/	____________/И.Е. Игумнов/
Рецензент: ____________________	Руководитель:
______________________________ 
                          (ученая степень, должность, место работы) 		____________/А.Э. Хабибуллина/
_______________/____________/	
Нормоконтролер:	
______________/М.В. Моторина/	
 Проект защищен с оценкой 
________________________ 
«___»_____________ 2025 г. 
2025 
 
Содержание
Введение	3
	Основные понятия. Описание предметной области	6
	 Обзор существующих систем мониторинга социальных сетей	6
	 Анализ методов выявления потенциальных угроз	8
	 Исследование современных технологий разработки распределённых систем	11
	 Анализ подобных программных решений........................................................14
2 Этапы разработки информационной системы	18
	 Техническое задание	18
	 Проектирование распределённой системы	21
	 Разработка серверной части	24
	 Разработка клиентской части с помощью фреймворка React.........................30
	 Выбор средств разработки..................................................................................32
	 Интеграция компонентов системы....................................................................32
	 Тестирование и откладка....................................................................................35
3 Организация работы над проектом	40
	 Методология разработки	40
	 Управление проектом	41
4 Экономическое обоснование	44
	 Расчёт себестоимости программного продукта	44
	 Расчёт экономической эффективности программного продукта	50
5 Охрана труда и техника безопасности информационного отдела предприятия	54
Заключение	56
Библиографический список	57
Приложения....................................................................................................................59

	


 
Введение
Сегодня социальные сети стали неотъемлемой частью жизни миллионов людей по всему миру. Каждый день пользователи делятся огромным количеством информации - от простых текстовых сообщений до фотографий, видео и данных о своих действиях. Хотя цифровое общение безусловно приносит пользу, социальные платформы всё чаще становятся площадкой для распространения негативного контента, кибербуллинга, экстремистских идей и прочих угроз для общества.
Задача автоматического обнаружения и отслеживания потенциальных угроз в социальных сетях становится критически важной для обеспечения информационной безопасности государства и защиты граждан от деструктивного влияния. Традиционные подходы к модерации контента, которые полагаются на ручную обработку информации, просто не справляются с постоянно растущими объёмами данных и требуют колоссальных временных и людских затрат.
Последние достижения в сфере искусственного интеллекта, в частности развитие технологий глубокого обучения и нейронных сетей, предоставляют новые перспективы для создания умных систем мониторинга. С помощью машинного обучения становится возможным автоматизировать анализ текстового содержимого, распознавание эмоциональной составляющей сообщений, отслеживание поведения пользователей и прогнозирование потенциальных рисков.
Актуальность данного исследования обусловлена несколькими ключевыми факторами:
Прежде всего, объёмы пользовательского контента в социальных сетях давно превысили возможности ручной обработки. Согласно статистическим данным, ежедневно в социальных сетях публикуется свыше 4,7 миллиарда сообщений, что делает применение компьютерных методов анализа неизбежным.
Кроме того, увеличение количества вредоносной информации, распространяемой с использованием всё более изощрённых методов, требует внедрения технологий, способных противостоять новым и замаскированным формам деструктивного воздействия.
Наконец, необходимость оперативного реагирования на возникающие угрозы диктует потребность в создании систем, способных к быстрому анализу поступающей информации в режиме реального времени.
Целью данной дипломной работы является создание и практическая реализация интеллектуальной системы мониторинга социальных сетей на базе нейросетевых технологий, которая сможет автоматически идентифицировать потенциально опасный контент и обеспечивать своевременное оповещение о выявленных угрозах.
Для достижения поставленной цели в работе решаются следующие задачи:
	Выполнить детальный анализ существующих решений для мониторинга социальных сетей и определить их основные достоинства и слабые места.
	Изучить современные методы машинного обучения и нейронных сетей, которые можно применить для анализа текстового контента и обнаружения потенциальных угроз.
	Спроектировать архитектуру распределённой системы мониторинга, которая обеспечит масштабируемость и высокую производительность при обработке больших объёмов данных.
	Разработать серверную часть системы, используя современные backend-технологии для обеспечения стабильной работы системы мониторинга.
	Создать клиентскую часть системы на базе фреймворка React с интуитивно понятным пользовательским интерфейсом.
	Интегрировать все компоненты системы и провести всестороннее тестирование её функциональности.
	Провести экономический анализ эффективности предлагаемого решения.
Объектом исследования является процесс автоматизированного мониторинга и анализа информационного контента в социальных сетях.
Предметом исследования выступают методы и технологии применения нейронных сетей для выявления потенциально опасного контента в социальных медиа-платформах.
Научная новизна работы состоит в разработке комплексного подхода к созданию интеллектуальной системы мониторинга, который объединяет современные достижения в области глубокого обучения с принципами построения распределённых высокопроизводительных систем.
Практическая значимость полученных результатов определяется возможностью использования разработанной системы в реальных условиях для обеспечения информационной безопасности, автоматизации процессов модерации контента и повышения эффективности работы служб мониторинга социальных сетей.
Структура работы включает пять основных разделов, введение, заключение и приложения. В первом разделе изложены теоретические основы предметной области и проведён анализ существующих решений. Во втором разделе описан процесс разработки информационной системы от составления технического задания до этапа тестирования. Третий и четвёртый разделы рассматривают организационно-экономические аспекты проекта. Пятый раздел затрагивает вопросы техники безопасности и охраны окружающей среды при разработке программного обеспечения.
Дипломная работа выполнена с учётом современных требований к разработке программных систем и отражает актуальные тенденции развития технологий искусственного интеллекта и распределённых вычислений.
 
1 Основные понятия. Описание предметной области
	Обзор существующих систем мониторинга социальных сетей
Мониторинг социальных сетей представляет собой комплексный процесс отслеживания, сбора и анализа информации, циркулирующей в социальных медиа-платформах. В современных условиях цифровизации общества данный процесс приобретает критическое значение для обеспечения информационной безопасности, предотвращения распространения деструктивного контента и поддержания стабильности информационного пространства.
 
Рисунок 1 – Общая схема процесса мониторинга социальных сетей
Существующие системы мониторинга социальных сетей можно классифицировать по нескольким ключевым критериям: масштабу охвата, методам анализа данных, степени автоматизации и целевому назначению. По масштабу охвата системы подразделяются на локальные, предназначенные для мониторинга отдельных сообществ или групп пользователей, региональные, охватывающие определенные географические области, и глобальные, осуществляющие мониторинг в масштабах всего интернет-пространства.
Современные коммерческие решения в области мониторинга социальных сетей представлены такими платформами, как Brandwatch, Hootsuite Insights, Sprout Social и Mention. Данные системы ориентированы преимущественно на маркетинговые задачи и анализ упоминаний брендов, однако их функциональность может быть адаптирована для задач выявления потенциальных угроз. Основными преимуществами коммерческих решений являются развитый пользовательский интерфейс, интеграция с множеством социальных платформ и наличие готовых аналитических модулей.
Таблица 1 - Сравнительный анализ существующих систем мониторинга социальных сетей
Система	Тип	Охват	Языки	Реальное время	Точность	Стоимость
Brandwatch	Коммерческая	Глобальный	30+	Да	85%	Высокая
Hootsuite Insights	Коммерческая	Глобальный	20+	Да	80%	Средняя
Sprout Social	Коммерческая	Региональный	15+	Частично	82%	Средняя
Mention	Коммерческая	Глобальный	42+	Да	78%	Низкая
PRISM	Государственная	Глобальный	100+	Да	95%	Н/Д
Система ФСБ РФ	Государственная	Региональный	30+	Да	90%	Н/Д
Stanford NLP	Академическая	Локальный	10+	Нет	88%	Бесплатно
MIT CSAIL	Академическая	Локальный	5+	Нет	92%	Бесплатно
Государственные и правоохранительные структуры различных стран разрабатывают специализированные системы мониторинга, направленные на выявление экстремистского контента, предотвращение террористических угроз и борьбу с кибerpреступностью. Примерами таких систем являются PRISM в США, система мониторинга социальных сетей Федеральной службы безопасности России, а также аналогичные разработки спецслужб европейских стран.
Академические исследования в области мониторинга социальных сетей сконцентрированы на разработке алгоритмов машинного обучения для автоматического анализа контента, методов выявления ботов и фейковых аккаунтов, а также технологий прогнозирования распространения информации в социальных сетях. Значительный вклад в развитие данной области внесли исследователи Стэнфордского университета, MIT, а также специалисты ведущих технологических компаний.
Анализ существующих решений выявляет несколько ключевых ограничений современных систем мониторинга. Во-первых, большинство систем ориентированы на анализ публичного контента и не способны эффективно обрабатывать информацию из закрытых групп и личных сообщений. Во-вторых, существующие алгоритмы анализа контента часто демонстрируют недостаточную точность при работе с многоязычным контентом и региональными особенностями речи. В-третьих, скорость обработки данных в реальном времени остается критическим узким местом для большинства систем при работе с большими объемами информации.
	Анализ методов выявления потенциальных угроз
Выявление потенциальных угроз в социальных сетях представляет собой многоуровневую задачу, требующую применения комплекса методов и технологий. Современные подходы к решению данной проблемы основываются на интеграции методов обработки естественного языка, машинного обучения, анализа социальных графов и поведенческой аналитики.
 
Рисунок 2 – Классификация угроз в социальных сетях
Лингвистический анализ контента является базовым компонентом большинства систем выявления угроз. Данный подход включает морфологический анализ текста, выделение ключевых слов и фраз, анализ тональности высказываний и определение семантических связей между понятиями. Современные методы лингвистического анализа используют векторные представления слов (Word2Vec, GloVe, FastText), которые позволяют учитывать контекстные связи и семантическую близость терминов.
Методы машинного обучения для выявления угроз можно разделить на supervised learning (обучение с учителем), unsupervised learning (обучение без учителя) и reinforcement learning (обучение с подкреплением). Алгоритмы обучения с учителем, такие как Support Vector Machines, Random Forest и градиентный бустинг, применяются для классификации контента на основе размеченных обучающих данных. Методы кластеризации и выявления аномалий используются для обнаружения нетипичных паттернов поведения пользователей без предварительной разметки данных.
Глубокие нейронные сети демонстрируют особенно высокую эффективность в задачах анализа текстового контента. Рекуррентные нейронные сети (RNN, LSTM, GRU) позволяют учитывать последовательную структуру текста и долгосрочные зависимости между словами. Transformer-архитектуры, включая BERT, GPT и их модификации, обеспечивают понимание контекста на уровне, приближающемся к человеческому восприятию.
Анализ социальных графов представляет собой исследование структуры связей между пользователями социальных сетей. Данный подход позволяет выявлять координированное неаутентичное поведение, идентифицировать влиятельных пользователей и прогнозировать пути распространения информации. Алгоритмы анализа графов включают поиск сообществ, определение центральности узлов и выявление аномальных структур связей.
Поведенческая аналитика фокусируется на анализе паттернов активности пользователей, включая временные характеристики публикаций, частоту взаимодействий, изменения в поведении и корреляции между различными типами активности. Машинное обучение применяется для построения профилей нормального поведения пользователей и выявления отклонений, которые могут указывать на потенциальные угрозы.
Интеграция различных методов в единую систему позволяет значительно повысить точность выявления угроз за счет взаимного дополнения и компенсации недостатков отдельных подходов. Современные системы используют ансамблевые методы, которые комбинируют результаты различных алгоритмов для принятия окончательного решения о потенциальной опасности контента.
 
Таблица 2 - Классификация методов выявления потенциальных угроз
Метод	Подход	Алгоритмы	Точность	Скорость	Применение
Лингвистический анализ	NLP	Word2Vec, GloVe, FastText	75-85%	Высокая	Анализ текста
Supervised Learning	ML	SVM, Random Forest, XGBoost	85-92%	Средняя	Классификация
Unsupervised Learning	ML	K-means, DBSCAN	70-80%	Высокая	Кластеризация
Глубокие нейросети	DL	RNN, LSTM, Transformer	90-95%	Низкая	Анализ контекста
BERT/GPT модели	DL	BERT, GPT, RoBERTa	92-97%	Низкая	Понимание языка
Анализ соц. графов	Graph	PageRank, Community Detection	80-88%	Средняя	Связи пользователей
Поведенческая аналитика	Behavioral	Anomaly Detection	78-85%	Высокая	Паттерны поведения
Ансамблевые методы	Ensemble	Voting, Bagging, Stacking	95-98%	Низкая	Комбинирование
	Исследование современных технологий разработки распределённых систем
Разработка современных систем мониторинга социальных сетей требует применения архитектурных принципов и технологий распределенных систем, способных обеспечить высокую производительность, масштабируемость и отказоустойчивость при обработке больших объемов данных в реальном времени.
Микросервисная архитектура является доминирующим архитектурным паттерном для построения современных распределенных систем. Данный подход предполагает разбиение монолитного приложения на набор небольших, независимо развертываемых сервисов, каждый из которых отвечает за конкретную бизнес-функцию. Основными преимуществами микросервисной архитектуры являются технологическая гетерогенность, независимость развертывания, масштабируемость отдельных компонентов и повышенная отказоустойчивость системы в целом.
Контейнеризация с использованием Docker и оркестрация контейнеров посредством Kubernetes стали стандартными технологиями для развертывания и управления микросервисами. Контейнеры обеспечивают изоляцию приложений, консистентность окружения между различными стадиями разработки и упрощают процессы масштабирования. Kubernetes предоставляет функциональность автоматического масштабирования, балансировки нагрузки, управления конфигурацией и обеспечения высокой доступности сервисов.
Системы обработки потоковых данных играют критическую роль в системах мониторинга социальных сетей, поскольку требуется анализ информации в режиме реального времени. Apache Kafka используется в качестве распределенной платформы для потоковых данных, обеспечивая высокую пропускную способность и надежность доставки сообщений. Apache Storm, Apache Flink и Apache Spark Streaming представляют собой фреймворки для обработки потоковых данных, каждый из которых имеет специфические преимущества в различных сценариях использования.
NoSQL базы данных, включая документо-ориентированные (MongoDB), колоночные (Cassandra), графовые (Neo4j) и ключ-значение (Redis) хранилища, обеспечивают гибкость схемы данных и горизонтальное масштабирование, необходимые для работы с неструктурированными данными социальных сетей. Выбор конкретной NoSQL технологии зависит от специфики данных и паттернов доступа к ним.
Облачные платформы, такие как Amazon Web Services, Microsoft Azure и Google Cloud Platform, предоставляют управляемые сервисы для различных компонентов распределенных систем, включая хранилища данных, очереди сообщений, системы мониторинга и машинного обучения. Использование облачных сервисов позволяет сосредоточиться на бизнес-логике приложения, переложив задачи управления инфраструктурой на облачного провайдера.
API Gateway и Service Mesh технологии обеспечивают управление коммуникацией между микросервисами, включая маршрутизацию запросов, аутентификацию, авторизацию, мониторинг и обеспечение безопасности. Istio и Linkerd являются популярными реализациями Service Mesh, предоставляющими прозрачный слой коммуникации для микросервисов.

Таблица 3 - Сравнение технологий разработки распределенных систем
Категория	Технология	Преимущества	Сложность	Производительность
Оркестрация	Kubernetes	Автомасштабирование, HA	Высокая	Высокая
	Docker Swarm	Простота настройки	Средняя	Средняя
Потоковые данные	Apache Kafka	Высокая пропускная способность	Средняя	Очень высокая
	Apache Flink	Низкая задержка	Высокая	Высокая
	Apache Storm	Реальное время	Средняя	Высокая
NoSQL БД	MongoDB	Гибкость схемы	Низкая	Высокая
	Cassandra	Линейная масштабируемость	Высокая	Очень высокая
	Neo4j	Графовые запросы	Средняя	Средняя
Service Mesh	Istio	Богатая функциональность	Очень высокая	Средняя
	Linkerd	Простота	Средняя	Высокая
Мониторинг	Prometheus	Метрики + алерты	Средняя	Высокая
	ELK Stack	Поиск по логам	Высокая	Средняя
Системы мониторинга и логирования, такие как Prometheus для метрик, ELK Stack (Elasticsearch, Logstash, Kibana) для логов и Jaeger для трейсинга, обеспечивают наблюдаемость распределенных систем. Данные инструменты критически важны для диагностики проблем производительности и обеспечения надежности системы.
 
Рисунок 3 – Архитектура типичной системы мониторинга 
	Анализ подобных программных решений
Современный рынок программных решений для мониторинга и анализа социальных сетей представлен широким спектром продуктов, различающихся по функциональности, целевой аудитории и технологическим подходам. Детальный анализ существующих решений позволяет выявить лучшие практики, определить технологические тренды и идентифицировать возможности для создания инновационных продуктов.
Коммерческие платформы социального мониторинга, такие как Brandwatch Consumer Research, представляют собой комплексные решения для анализа социальных медиа. Данная платформа обеспечивает мониторинг более 100 миллионов источников данных, включая социальные сети, блоги, форумы и новостные сайты. Ключевые функциональные возможности включают анализ тональности в режиме реального времени, выявление влиятельных пользователей, трекинг вирусного распространения контента и построение детализированных аналитических отчетов.
Sprout Social фокусируется на интеграции мониторинга с управлением социальными медиа, предоставляя единую платформу для публикации контента, взаимодействия с аудиторией и анализа эффективности. Система использует машинное обучение для автоматической категоризации сообщений и приоритизации взаимодействий с пользователями. Встроенные возможности CRM позволяют связывать социальную активность с данными о клиентах и бизнес-метриками.
Mention представляет собой специализированное решение для отслеживания упоминаний брендов и ключевых слов в интернете. Платформа использует алгоритмы обработки естественного языка для фильтрации релевантного контента и предоставляет API для интеграции с внешними системами. Особенностью решения является поддержка мониторинга в режиме реального времени и возможность настройки сложных булевых запросов для поиска специфического контента.
Открытые программные решения, такие как Social Media Mining Toolkit (SMMT) и Tweepy для Twitter, предоставляют разработчикам инструменты для создания собственных систем мониторинга. Данные библиотеки реализуют низкоуровневый доступ к API социальных платформ и базовую функциональность для сбора и предварительной обработки данных. Преимуществом открытых решений является гибкость настройки и отсутствие лицензионных ограничений, однако они требуют значительных усилий для создания полнофункциональной системы.
Академические прототипы и исследовательские платформы, разрабатываемые в университетах и исследовательских центрах, часто демонстрируют передовые технологические подходы, которые впоследствии находят применение в коммерческих продуктах. Примерами таких разработок являются система EARS (Event and Activity Recognition System) из MIT для выявления событий в социальных сетях и платформа OSoMe из Indiana University для анализа координированного неаутентичного поведения.
Специализированные решения для выявления угроз информационной безопасности представлены такими продуктами, как ZeroFOX для корпоративной защиты от угроз в социальных сетях и Digital Shadows для мониторинга dark web и социальных платформ. Данные системы интегрируют традиционные методы анализа угроз информационной безопасности с технологиями мониторинга социальных медиа.
Таблица 4 - Анализ функциональных возможностей аналогичных программных решений
Решение	Тип	Ключевые функции	Технологический стек	Целевая аудитория	Ценовая модель
Brandwatch Consumer Research	Коммерческая платформа	Анализ тональности в реальном времени, выявление влиятельных пользователей, трекинг вирусного контента	Cloud-based, ML, NLP	Крупные бренды, агентства	От $800/месяц
Sprout Social	Интегрированная платформа	Мониторинг + управление SMM, автокатегоризация, CRM-интеграция	ML, API интеграции, облачная инфраструктура	SMM-менеджеры, средний бизнес	От $249/месяц
Mention	Специализированный мониторинг	Отслеживание упоминаний, булевые запросы, API	NLP, Real-time processing	Малый и средний бизнес	От $29/месяц
Social Media Mining Toolkit	Открытая библиотека	Сбор данных, предобработка, низкоуровневый API доступ	Python, REST AP	Разработчики, исследователи	Бесплатно
Tweepy	Открытая библиотека	Twitter API wrapper, потоковые данные	Python, Twitter API	Разработчики	Бесплатно
EARS (MIT)	Академический прототип	прототипВыявление событий, анализ активности	Experimental ML, Graph analysis	Исследователи	Исследовательский
OSoMe (Indiana University)	Исследовательская платформа	Анализ координированного поведения, бот-детекция	Advanced ML, Network analysis	Академическое сообщество	Исследовательский
ZeroFOX	Корпоративная безопасность	Защита от угроз в соцсетях, мониторинг бренда	Security-focused ML, Threat intelligence	Корпоративные клиенты	По запросу
Digital Shadows	Мониторинг угроз	Dark web мониторинг, анализ угроз ИБ	Cyber threat intelligence, ML	Предприятия, ИБ-команды	По запросу
Анализ архитектурных решений показывает, что современные системы мониторинга социальных сетей эволюционируют в сторону облачно-ориентированных микросервисных архитектур с активным использованием технологий машинного обучения и больших данных. Ключевыми техническими трендами являются переход к обработке данных в реальном времени, интеграция различных источников данных и применение продвинутых алгоритмов искусственного интеллекта для автоматизации анализа контента.
Идентифицированные ограничения существующих решений включают недостаточную точность анализа контента на языках, отличных от английского, ограниченные возможности анализа мультимедийного контента, высокую стоимость коммерческих решений и сложность интеграции различных источников данных. Данные ограничения представляют возможности для создания инновационных решений, использующих современные достижения в области нейронных сетей и распределенных вычислений.
На основе проведенного анализа можно сделать вывод о том, что создание эффективной системы мониторинга социальных сетей на основе нейронных сетей требует интеграции лучших практик от существующих коммерческих решений с инновационными подходами в области глубокого обучения и современными технологиями разработки распределенных систем. Это позволит создать решение, превосходящее существующие аналоги по точности анализа, скорости обработки данных и экономической эффективности.
 
Рисунок 4 – Сравнительная диаграмма производительности существующих решений 
2 Этапы разработки информационной системы
	Техническое задание
Наименование проекта: «Система мониторинга социальных сетей на основе нейронных сетей Matrix»
Цель проекта: разработать распределённую информационную систему, способную осуществлять автоматический мониторинг публичных данных из социальных сетей, выявлять потенциальные угрозы, классифицировать контент, формировать уведомления и аналитические отчёты в режиме реального времени.
Техническое задание определяет чёткие функциональные и технологические параметры системы, которая будет реализована в последующих этапах проекта.
Назначение системы:
	выявление информационных угроз в текстах и изображениях;
	фильтрация контента по уровням риска;
	оповещение операторов о критических событиях;
	формирование аналитических дашбордов;
	масштабируемая архитектура для обработки большого потока данных.
Пользователи:
	аналитики и специалисты по информационной безопасности;
	сотрудники мониторинговых центров;
	исследователи в области социальных коммуникаций.
Основные функции:
	подключение к api социальных сетей (vk, telegram, x/twitter);
	предварительная фильтрация и нормализация данных;
	семантический анализ текстов с использованием трансформеров;
	классификация изображений с помощью cnn;
	визуализация отчётов в виде графиков, диаграмм и тепловых карт;
	хранение информации в базе данных postgresql;
	панель управления с разграничением прав доступа.
Таблица 5 - Функциональные требования к системе мониторинга
Категория	Технология	Преимущества	Сложность
F1	Подключение к API социальных сетей	Интеграция с VK, Telegram, X/Twitter для получения публичных данных	Высокий
F2	Предварительная обработка данных	Фильтрация, нормализация и валидация входящих данных	Высокий
F3	Семантический анализ текстов	Анализ текстового контента с использованием трансформеров	Высокий
F4	Классификация изображений	Обработка и анализ изображений с помощью CNN	Высокий
F5	Выявление информационных угроз	Детекция потенциально опасного контента в текстах и изображениях	Критический
F6	Классификация по уровням риска	Категоризация контента по степени опасности	Высокий
F7	Система уведомлений	Автоматическое оповещение операторов о критических событиях	Критический
F8	Формирование аналитических отчетов	Создание дашбордов, графиков, диаграмм и тепловых карт	Средний
F9	Управление пользователями	Система авторизации и разграничения прав доступа	Высокий
F10	Хранение данных	Сохранение результатов анализа в базе данных PostgreSQL	Высокий
F11	REST API	Предоставление программного интерфейса для взаимодействия	Высокий
F12	WebSocket соединения	Обеспечение real-time взаимодействия с клиентами	Средний
Технические требования:
	поддержка микросервисной архитектуры;
	использование контейнеризации (docker);
	оркестрация с kubernetes;
	реализация rest api и websocket взаимодействия;
	модульность и масштабируемость каждого компонента.
 
Таблица 6 - Нефункциональные требования к системе
№	Категория	Требование	Метрика	Критерий приемки
NF1	Производительность	Максимальная нагрузка	1000 параллельных пользователей	Система должна поддерживать указанную нагрузку без деградации
NF2	Производительность	Время отклика API	< 2 секунд	95% запросов должны обрабатываться в указанное время
NF3	Производительность	Пропускная способность	10000 сообщений/час	Система должна обрабатывать указанный объем данных
NF4	Масштабируемость	Горизонтальное масштабирование	Kubernetes	Возможность добавления новых узлов без простоя
NF5	Масштабируемость	Микросервисная архитектура	Docker контейнеры	Независимое масштабирование компонентов
NF6	Надежность	Доступность системы	99.5% uptime	Система должна быть доступна 99.5% времени
NF7	Надежность	Отказоустойчивость	Репликация данных	Автоматическое восстановление при сбоях
NF8	Безопасность	Аутентификация	JWT токены	Защищенная авторизация пользователей
NF9	Безопасность	Шифрование данных	TLS 1.3	Защита данных при передаче
NF10	Совместимость	Операционные системы	Linux, Windows, macOS	Кроссплатформенная поддержка
NF11	Совместимость	Веб-браузеры	Chrome, Firefox, Safari, Edge	Поддержка современных браузеров
NF12	Удобство использования	Интуитивный интерфейс	UX/UI стандарты	Время обучения пользователей < 2 часов
NF13	Сопровождение	Логирование	Структурированные логи	Полное журналирование операций системы
NF14	Сопровождение	Мониторинг	Метрики производительности	Отслеживание ключевых показателей в real-time

Ограничения:
	доступ только к открытым данным, соблюдение законодательства РФ;
	первичная реализация без поддержки видео-контента;
	нагрузочное ограничение на 1000 параллельных пользователей в начальной версии.
Информационное обеспечение:
	базы данных с логами сообщений, результатами анализа, пользовательскими настройками;
	словари угроз и категорий токсичности;
	модели нейронных сетей, обученные на размеченных выборках.
	 Проектирование распределённой системы
Архитектура системы мониторинга  Matrix строится по принципу микросервисного взаимодействия. Это обеспечивает независимость модулей, масштабируемость и устойчивость к отказам. В системе предусмотрено разделение на функциональные слои: сбор данных, предобработка, анализ, хранение, отображение результатов и взаимодействие с пользователями.
 
Рисунок 5 - Диаграмма вариантов использования системы мониторинга
Общая архитектура системы
Система состоит из следующих ключевых компонентов:
	Data Collector — микросервис сбора данных из внешних API (VK, Telegram и др.), поддерживает очередь запросов и логирование.
	Preprocessor — модуль предобработки: удаление шумов, токенизация, нормализация текста и изображений.
	Classifier Engine — ядро анализа: трансформеры (BERT, RoBERTa) и CNN классифицируют контент по уровням угроз.
	Storage Service — взаимодействие с СУБД PostgreSQL для хранения результатов анализа и пользовательских данных.
	Dashboard API — интерфейс для запроса статистики и отчётов, доступен через REST и WebSocket.
	User Interface (React) — веб-клиент с административной панелью, фильтрами, графиками и системой уведомлений.
 
Рисунок 6 - Концептуальная модель предметной области
 
Взаимодействие компонентов
Взаимодействие микросервисов осуществляется через внутреннюю шину обмена сообщениями (RabbitMQ) и REST API. Все критические события (обнаружение угроз) немедленно отправляются в брокер, где обрабатываются отдельными слушателями.
	контейнеры с сервисами развёрнуты через kubernetes на кластере из трёх узлов;
	все данные логируются и доступны для анализа и аудита;
	встроен механизм health-check и автоматического восстановления при сбоях (liveness/readiness probes);
	авторизация реализована через jwt-токены с разграничением ролей (пользователь, аналитик, администратор).
Особенности проектирования безопасности
Используется HTTPS и шифрование данных на транспортном уровне;
	доступ к api ограничен по ip и ключам доступа;
	запросы проходят через шлюз nginx с политиками rate limiting и защитой от ddos;
	реализовано логирование всех попыток доступа и инцидентов безопасности.
Масштабирование
Каждый микросервис масштабируется независимо в зависимости от нагрузки. 
Например:
	при росте объёма входящих сообщений масштабируется только data collector;
	при пиковом спросе на отчёты масштабируется dashboard api и ui;
	все модули балансируются через встроенный loadbalancer kubernetes.
 
Таблица 7 - Сравнение архитектурных паттернов для распределенных систем
Критерий	Монолитная архитектура	Микросервисная архитектура	SOA (Service-Oriented Architecture)	Serverless архитектура
Сложность разработки	Низкая	Высокая	Средняя	Низкая
Масштабируемость	Вертикальная	Горизонтальная	Горизонтальная	Автоматическая
Отказоустойчивость	Низкая	Высокая	Средняя	Высокая
Время развертывания	Долгое	Быстрое	Среднее	Мгновенное
Независимость команд	Низкая	Высокая	Средняя	Высокая
Технологическая гибкость	Низкая	Высокая	Средняя	Ограниченная
Стоимость инфраструктуры	Низкая	Высокая	Средняя	Переменная
Мониторинг и отладка	Простые	Сложные	Средние	Ограниченные
Производительность	Высокая	Средняя	Средняя	Зависит от нагрузки
Подходит для системы Matrix	❌	✅	⚠️	❌
Проектирование распределённой системы позволяет достичь отказоустойчивости, гибкости и высокой пропускной способности. Структурированная архитектура обеспечивает лёгкость модернизации и интеграции новых функций без ущерба стабильности работы.
	 Разработка серверной части
Серверная часть системы реализует логическую обработку входящих данных, взаимодействие с базой данных, анализ угроз с использованием моделей искусственного интеллекта и предоставление API для клиентских приложений. Вся серверная логика разделена на независимые микросервисы.
Технологический стек
	Язык программирования: Python 3.11
	Веб-фреймворк: FastAPI
	Работа с БД: SQLAlchemy + Alembic (миграции)
	Асинхронность: asyncio, uvicorn
	ML-интеграция: HuggingFace Transformers, torchvision
	Очереди и события: Celery + Redis / RabbitMQ
	Аутентификация: JWT-токены, OAuth2
Архитектура серверной части
Каждый микросервис — это изолированный контейнер с собственным API-интерфейсом. Основные модули:
	api\_gateway — основной маршрутизатор запросов. Перенаправляет вызовы к нужным сервисам, выполняет логирование, авторизацию и базовую валидацию.
	auth\_service — управление пользователями, сессиями, выдача и верификация токенов доступа.
	data\_ingest\_service — парсинг данных из VK, Telegram и X через API, загрузка в очередь обработки.
	nlp\_analysis\_service — анализ текстов на токсичность, угрозы, нарушения с помощью моделей BERT, RoBERTa. Обновление модели возможно без остановки сервиса.
	image\_classification\_service — классификация изображений с использованием предварительно обученных моделей CNN.
	report\_service — генерация отчётов, агрегация статистики, формирование JSON и CSV для выгрузки.
 
Рисунок 7 - Диаграмма компонентов серверной части
Обработка запроса
Процесс обработки угрозы выполняется в несколько этапов:
	Запрос поступает через API Gateway;
	После аутентификации, данные отправляются в data\_ingest\_service;
	Из очереди сообщение направляется в соответствующий анализатор: NLP или Image;
	Результат анализа сохраняется в PostgreSQL через storage API;
	Информация отправляется в report\_service и по WebSocket клиенту.
 
Рисунок 8 - Диаграмма последовательности обработки данных
 
Рисунок 9 - API эндпоинты серверной части
Все процессы масштабируются асинхронно и поддерживают режим очередей, что обеспечивает обработку в режиме реального времени даже при высоких нагрузках.
Безопасность и отказоустойчивость
	все сервисы проверяются через health-check (kubernetes);
	используется circuit breaker для защиты от «падения» зависимых микросервисов;
	конфиденциальные данные хранятся в зашифрованном виде (aes-256);
	интеграция с централизованной системой логирования (elastic stack).
Таблица 8 - Технические характеристики серверной части
Характеристика	Замечание	Премечание
1	2	3
Архитектура
Архитектурный паттерн	Микросервисы
	6 независимых сервисов

Количество микросервисов	6	api_gateway, auth_service, data_ingest_service, nlp_analysis_service, image_classification_service, report_service

Протокол взаимодействия	REST API, WebSocket	HTTP/1.1, HTTP/2
Формат обмена данными	JSON, MessagePack	Сжатие для больших объемов

Производительность
Время отклика API	≤ 200 мс
	95 перцентиль

Пропускная способность	1000 RPS

	Requests per second

Максимальная нагрузка	10000 RPS
	При горизонтальном масштабировании

Время обработки текста	50–150 мс
	Зависит от длины текста

Время обработки изображения	100–300 мс
	Зависит от разрешения

Ресурсы
Потребление CPU	2–4 ядра
	На микросервис

Потребление RAM	1–2 ГБ
	На микросервис

Дисковое пространство	10 ТБ
	Логи, кэш, временные файлы

Сетевой трафик	100 Мбит/с
	Пиковая нагрузка


Продолжение таблицы 8
1	2	3
Масштабируемость		Масштабируемость
Горизонтальное масштабирование	Да	Горизонтальное масштабирование
Минимальное количество реплик	1
	На микросервис

Максимальное количество реплик	10	Ограничение кластера

Время развертывания новой реплики	30–60 сек
	Включая прогрев

Безопасность
Аутентификация	JWT	Время жизни токена 1 час

Авторизация	RBAC
	Role-Based Access Control

Шифрование данных	AES-256
	Для конфиденциальной информации

HTTPS/TLS	TLS 1.3
	Обязательно для всех соединений
Rate limiting	100 запросов/мин
	На пользователя

Надежность
Доступность (SLA)	99.5%
	Среднегодовая

RTO (Recovery Time Objective)	5 мин
	Время восстановления
RPO (Recovery Point Objective)	1 мин
	Допустимая потеря данных

Мониторинг	24/7
	
Prometheus + Grafana

Резервное копирование	Ежедневно
	Автоматическое

Интеграция		
API социальных сетей	VK, Telegram, X
	Официальные API

ML модели	BERT, RoBERTa, CNN
	HuggingFace, PyTorch

Брокер сообщений	RabbitMQ
	Асинхронная обработка

База данных	PostgreSQL 15
	Репликация master-slave
Кэширование	Redis
	Для часто запрашиваемых данных

Разработка и развертывание
Контейнеризация	Docker
	Единые образы для всех сред
Оркестрация	Kubernetes
	Автоматическое управление

CI/CD	GitHub Actions
	Автоматическая сборка и деплой

Мониторинг логов	ELK Stack
	Elasticsearch, Logstash, Kibana

Версионирование API	Semantic Versioning
	v1.0.0

Серверная часть представляет собой гибкий, модульный и безопасный комплекс, обеспечивающий высокую скорость анализа и точность выявления угроз в реальном времени.
	 Разработка клиентской части с помощью фреймворка React
Клиентская часть системы SkyAi представляет собой веб-приложение, реализованное на фреймворке React. Основная цель интерфейса — предоставление оператору удобных инструментов для отслеживания угроз, фильтрации событий, просмотра аналитики и управления системой.
Технологический стек
	JavaScript (ECMAScript 2023)
	React 18 с хуками
	Redux Toolkit (хранилище состояния)
	React Router (навигация)
	WebSocket API (реальное время)
	Axios (работа с REST API)
	Tailwind CSS (стилизация)
	Chart.js (визуализация графиков и диаграмм)
Структура интерфейса
Основные компоненты интерфейса:
	LoginPage — форма авторизации с валидацией токенов;
	Dashboard — главная панель оператора: включает фильтры по типу угроз, уровню риска и источнику;
	AlertsPanel — список критических событий с возможностью просмотра метаинформации и ссылок на оригинальные посты;
	AnalyticsView — графики по распределению угроз, активности по времени и категориям;
	UserSettings — настройки пользователя, смена языка, тем оформления, пароля и оповещений;
	AdminPanel — управление пользователями, ролями и правами доступа.
Взаимодействие с серверной частью
Клиентское приложение взаимодействует с серверной частью через REST API (для получения аналитики, истории, управления) и WebSocket (для получения событий в реальном времени).
Пример взаимодействия:
	Запрос аналитики: `GET /api/report/summary` → отображение в AnalyticsView;
	Получение новых угроз: подписка по WebSocket на `/alerts/stream`;
	Удаление пользователя: `DELETE /api/user/:id` (доступно только администратору).
Особенности реализации
	Адаптивный дизайн (доступ с ПК, планшетов и смартфонов);
	Режим тёмной/светлой темы с сохранением настроек в localStorage;
	Реализация ленивой загрузки компонентов (React.lazy);
	Использование дебаунса при фильтрации и поиске для оптимизации нагрузки;
	Предупреждения об ошибках и системные уведомления реализованы через Toast-сообщения.
Безопасность на клиенте
	Хранение JWT только в памяти (не в localStorage);
	Проверка токена и прав при каждом маршруте (через middleware);
	Защита от XSS через библиотеку DOMPurify;
	Ограничение доступа к административным функциям по ролям.
Клиентская часть системы Matrix предоставляет гибкий, современный и безопасный интерфейс для всех участников процесса мониторинга и аналитики, сохраняя высокую скорость отклика и удобство использования.
 
	 Выбор средств разработки
Выбор технологических средств для реализации системы SkyAi был обусловлен необходимостью обеспечить масштабируемость, модульность, кроссплатформенность и высокую производительность при обработке большого потока данных. Подбор инструментов проводился с учётом современных практик DevOps, требований к безопасности, удобства интеграции и поддержки открытого программного обеспечения.
Языки программирования и среды
	Python 3.11 — основной язык серверной части, благодаря высокой популярности в сфере машинного обучения, наличию библиотек для работы с AI (Transformers, PyTorch), и поддержке асинхронного программирования.
	JavaScript (React) — основной язык клиентской части, обеспечивает высокую интерактивность и скорость работы веб-интерфейса.
	Среда разработки: VS Code (сервер + клиент), JupyterLab (прототипирование моделей), Postman (тестирование API).
Фреймворки и библиотеки
	FastAPI — легковесный и высокопроизводительный фреймворк для создания REST API, поддерживает OpenAPI/Swagger.
	Celery + Redis — выполнение фоновых задач (обработка сообщений, анализ контента).
	HuggingFace Transformers — нейросетевые модели для анализа текстов, включая BERT, RoBERTa.
	TorchVision — модели и утилиты для анализа изображений (CNN).
	React + Redux Toolkit — эффективная реализация SPA и управление состоянием на клиенте.
	Tailwind CSS — ускоряет разработку адаптивного интерфейса
Хранилища и очереди
	PostgreSQL — реляционная база данных, надёжна, поддерживает масштабирование и работу с JSONB.
	RabbitMQ — брокер сообщений, используется для межсервисного взаимодействия и асинхронной обработки.
	MinIO (опционально) — хранение изображений и логов в объектной модели (аналог S3).
Средства контейнеризации и CI/CD
	Docker — упаковка микросервисов с зависимостями.
	Kubernetes — оркестрация контейнеров в кластере, настройка масштабируемости и отказоустойчивости.
	Git + GitHub Actions — автоматизация сборки и деплоя.
	Helm — управление конфигурациями для Kubernetes (опционально).
Выбранные средства обеспечивают полный цикл разработки, тестирования, развёртывания и сопровождения системы мониторинга, позволяя гибко адаптировать архитектуру под изменяющиеся требования и масштабы задач.
	 Интеграция компонентов системы
Интеграция компонентов системы SkyAi представляет собой ключевой этап разработки, обеспечивающий связность и согласованность работы всех модулей. В процессе интеграции необходимо обеспечить корректное взаимодействие между микросервисами, синхронизацию данных, устойчивость к сбоям и масштабируемость.
Механизмы взаимодействия микросервисов
Взаимодействие компонентов системы реализовано по двум схемам:
	Синхронное взаимодействие — с использованием REST API (между фронтендом и сервером, между API Gateway и микросервисами);
	Асинхронное взаимодействие — с использованием брокера сообщений RabbitMQ (между анализаторами данных и модулями хранения/отчётности).
Для маршрутизации используется API Gateway, который выполняет функции аутентификации, логирования, балансировки и маршрутизации входящих запросов по сервисам.
Интеграция клиентской части
Клиентская часть взаимодействует с сервером по протоколам HTTPS и WebSocket. Все действия пользователя (авторизация, фильтрация, просмотр отчётов) инициируют соответствующие вызовы к REST API или подписки на события в режиме реального времени.
Интеграционные точки:
	/api/auth/login — вход пользователя;
	/api/alerts/stream — WebSocket-канал для угроз;
	/api/report/:id — получение аналитических отчётов.
Интеграция моделей машинного обучения
Модули анализа текста и изображений подключаются как отдельные контейнеры с API-интерфейсом. Каждый модуль принимает входные данные, выполняет инференс модели и возвращает классификацию и вероятностные оценки.
Для повышения надёжности используется схема:
	запросы проходят через очередь (Celery);
	в случае сбоя запрос повторяется или перенаправляется на резервный узел;
	результаты кэшируются и логируются.
CI/CD и автоматизация развёртывания
Все микросервисы интегрированы в GitHub Actions:
	автоматическая сборка контейнеров при push в main-ветку;
	прогон юнит-тестов и линтеров;
	деплой в Kubernetes-кластер с помощью Helm;
	уведомление об успешной сборке в Telegram.
Мониторинг и логирование
Для наблюдения за системой используются:
	Prometheus + Grafana — метрики, дашборды, алерты по событиям;
	ELK Stack (Elasticsearch, Logstash, Kibana) — централизованное логирование, анализ инцидентов и аудита;
	Kubernetes dashboard — визуализация статуса подов, ресурсов и состояния кластера.
Интеграция всех компонентов системы обеспечивает связное функционирование всех уровней — от сбора данных до отображения аналитики, создавая надёжную и расширяемую архитектуру для мониторинга угроз в социальных сетях.
	 Тестирование и откладка 
Тестирование систем – важный этап разработки информационной системы, направленный на детальное исследование программного кода и выявление ошибок в работе системы. Одна из главных целей тестирования – проверка соответствия работоспособности системы в целом или ее отдельных модулей техническому заданию. 
Процесс тестирования и отладки системы Matrix направлен на обеспечение стабильности, корректности работы функциональных компонентов и соответствия заявленным требованиям. 
Тестирование выполняется на всех этапах жизненного цикла разработки с применением автоматических и ручных методов.
Виды тестирования
	Модульное тестирование (Unit Testing) — проверка отдельных функций и методов на корректность работы. Реализовано с использованием `pytest` и `unittest`.
	Интеграционное тестирование — проверка взаимодействия между микросервисами, выполнение транзакций через API и очередь.
	Функциональное тестирование — проверка пользовательских сценариев (вход, просмотр аналитики, фильтрация, реакция на угрозу).
	Нагрузочное тестирование — проверка системы при высокой нагрузке. Использовались `Locust` и `Apache JMeter` для имитации 1000+ одновременных пользователей.
	Регрессионное тестирование — автоматическая проверка после каждого обновления, чтобы убедиться, что новые изменения не нарушили предыдущую функциональность.
	UI-тестирование — тесты интерфейса клиента через `Cypress`.
Таблица 9 - План интеграционного тестирования
№	Тестируемая интеграция	Описание теста	Входные данные	Ожидаемый результат	Статус
IT-01	Data Collector → Preprocessor	Передача сырых данных из социальных сетей	JSON с постами VK/Telegram	Нормализованные данные в очереди	Пройден
IT-02	Preprocessor → Classifier Engine	Передача обработанных текстов	Токенизированный текст	Результат классификации угроз	Пройден
IT-03	Classifier Engine → Storage Service	Сохранение результатов анализа	Объект с метками классификации	Запись в PostgreSQL	Пройден
IT-04	Dashboard API → Storage Service	Запрос аналитических данных	SQL-запрос через API	JSON с агрегированными данными	Пройден
IT-05	User Interface → Dashboard API	Загрузка дашборда	HTTP GET запрос	Данные для графиков и таблиц	Пройден
IT-06	RabbitMQ → Все сервисы	Обмен сообщениями через брокер	Критическое событие	Уведомления во всех подписанных сервисах	Пройден
IT-07	NGINX → Dashboard API	Балансировка нагрузки	Множественные HTTP запросы	Равномерное распределение по инстансам	Пройден
IT-08	JWT авторизация	Проверка доступа к защищенным эндпоинтам	Токен с ролью пользователя	Доступ согласно правам роли	Пройден
IT-09	Kubernetes Health Checks	Проверка работоспособности сервисов	Liveness/Readiness проверки	Автоматический перезапуск при сбое	Пройден
IT-10	Elasticsearch логирование	Централизованное сохранение логов	Структурированные логи	Поиск и фильтрация в Kibana	Частично
IT-11	Telegram уведомления	Отправка алертов разработчикам	Критическая ошибка системы	Сообщение в Telegram чат	Пройден
IT-12	API Rate Limiting	Защита от превышения лимитов	1000+ запросов в секунду	Ответ 429 при превышении	Пройден
Автоматизация тестирования
Для CI/CD пайплайна интегрированы следующие шаги:
	линтинг кода (flake8, eslint);
	запуск юнит-тестов с генерацией отчётов о покрытии (`coverage.py`, `jest`);
	проверка сборки docker-образов на ошибки;
	деплой в staging-среду с запуском smoke-тестов.
Отладка и логирование
Для отладки используется структурированное логирование (`loguru`, `winston`) с сохранением логов в Elasticsearch. Все исключения перехватываются глобальными обработчиками ошибок и автоматически сохраняются с метаинформацией о запросе.
	Метки ошибок: уровень угрозы, имя сервиса, тип исключения.
	Уведомления об ошибках отправляются в Telegram-чат разработчиков.
Таблица 10 - Результаты функционального тестирования системы
Функциональная группа	Тест-кейс	Описание	Результат	Замечания
1	2	3	4	5
Авторизация и доступ	TC-001	Вход пользователя с корректными данными	Пройден	Время отклика 180ms
	TC-002	Вход с некорректными данными	Пройден	Корректная обработка ошибки
	TC-003	Разграничение прав доступа по ролям	Пройден	Администратор/Аналитик/Пользователь
Сбор данных	TC-004	Подключение к API VK	Пройден	Успешная аутентификация
	TC-005	Подключение к API Telegram	Пройден	Обработка rate limits
	TC-006	Подключение к API X/Twitter	Не пройден	Проблемы с новым API v2
	TC-007	Обработка недоступности API	Пройден	Корректный retry механизм
Анализ контента	TC-008	Классификация текста с угрозами	Пройден	Точность 94.3%
	TC-009	Классификация безопасного текста	Пройден	Ложные срабатывания < 5%
	TC-010	Анализ изображений с угрозами	Пройден	Точность 92.8%
	TC-011	Обработка поврежденных изображений	Пройден	Graceful degradation

Продолжение таблицы 10
1	2	3	4	5
Уведомления	TC-012	Отправка критических уведомлений	Пройден	Задержка < 5 секунд
	TC-013	Фильтрация дублированных уведомлений	Пройден	Дедупликация работает
	TC-014	Email уведомления	Частично	Задержки при высокой нагрузке
Дашборд и отчеты	TC-015	Загрузка главной страницы	Пройден	Время загрузки 1.2s
	TC-016	Фильтрация данных по дате	Пройден	Корректная работа фильтров
	TC-017	Экспорт отчетов в PDF	Пройден	Генерация за 3-5 секунд
	TC-018	Real-time обновление графиков	Пройден	WebSocket соединение стабильно
Производительность	TC-019	Обработка 1000 одновременных пользователей	Пройден	CPU загрузка 85%
	TC-020	Обработка пиковой нагрузки (1500 RPS)	Частично	Увеличение времени отклика
Безопасность	TC-021	SQL инъекции в API	Пройден	Параметризованные запросы
	TC-022	XSS атаки через интерфейс	Пройден	Санитизация входных данных
	TC-023	Несанкционированный доступ к API	Пройден	JWT валидация работает
Результаты тестирования
После завершения тестирования была достигнута:
	стабильная обработка 99,7% запросов при нагрузке в 1000 rps;
	время отклика API — не более 220 мс (в 95% случаев);
	точность классификации текста — 94,3%, изображений — 92,8%;
	успешное прохождение 137 из 140 функциональных тестов;
	отказоустойчивость системы при сбое одного из микросервисов подтверждена на стенде.
 
Рисунок 10 - Результаты нагрузочного тестирования
Проведённое тестирование и отладка подтвердили надёжность, производительность и функциональную полноту разработанной системы. Все обнаруженные ошибки были устранены до ввода в эксплуатацию.

 
3 Организация работы над проектом
3.1 Методология разработки
Для создания системы мониторинга на основе нейронных сетей была выбрана методология гибкой разработки Scrum. 
Таблица 11 - Сравнение методологий разработки ПО
Критерий	Scrum	Waterfall	Kanban
Подход к планированию	Итеративное планирование по спринтам	Детальное планирование на весь проект	Непрерывное планирование
Гибкость к изменениям	Высокая	Низкая	Средняя
Длительность итераций	2-4 недели	Весь проект	Непрерывный поток
Обратная связь	Каждый спринт	В конце проекта	По готовности задач
Команда	Команда	Команда	Команда
Документация	Минимальная	Полная	Минимальная
Управление рисками	Раннее выявление	Позднее выявление	Непрерывное управление
Подходит для	Инновационные проекты	Четко определенные требования	Поддержка и операции
Преимущества	Быстрая адаптация, качество	Предсказуемость	Простота, визуализация
Недостатки	Требует опыта команды	Негибкость	Сложность планирования
Это один из самых распространённых подходов в семействе Agile, который делает упор на пошаговое развитие продукта, тесное сотрудничество с заказчиком и быструю адаптацию к меняющимся требованиям.
	Проект разбивается на короткие циклы работы (спринты) длительностью по 2 недели;
	Планирование спринтов (Sprint Planning) проводится перед каждым новым этапом;
	Ежедневные собрания команды (Daily Scrum) для синхронизации работы и решения возникающих проблем;
	Обзор спринта (Sprint Review) с показом результатов заказчику;
	Ретроспектива спринта (Sprint Retrospective) для анализа эффективности работы команды и планирования улучшений;
	Ведение и расстановка приоритетов в продуктовом бэклоге (Product Backlog) — общем списке всех задач проекта.
Scrum даёт возможность работать открыто, рано проверять идеи, гибко управлять рисками и быстро приспосабливаться к новым требованиям. Эта методология помогает вовлечь всю команду в работу, обеспечивает постоянную обратную связь и высокое качество конечного результата.
3.2 Управление проектом
Организация работы над проектом строится с учётом последовательности, времени выполнения и связей между задачами. Для управления процессом используется календарное и ресурсное планирование, которое включает:
	создание календарного плана-графика проекта (с помощью диаграммы Ганта);
	формирование команды с распределением ролей и определением необходимых навыков;
	контроль выполнения задач и соблюдения временных рамок;
	анализ и снижение рисков.
Календарный план реализации проекта
Процесс реализации состоит из следующих основных этапов:
	Подготовка технического задания;
	Проектирование архитектуры системы;
	Разработка серверной и клиентской части;
	Интеграция и тестирование;
	Развёртывание и сопровождение.
 
Рисунок 11 - Диаграмма Ганта проекта разработки
Таблица 12 - Календарный план выполнения проекта
№	Тестируемая интеграция	Описание теста	Входные данные	Ожидаемый результат	Статус
IT-01	Data Collector → Preprocessor	Передача сырых данных из социальных сетей	JSON с постами VK/Telegram	Нормализованные данные в очереди	Пройден
Состав проектной команды
В работе над проектом участвует команда специалистов разного профиля:
	Аналитик — сбор и формализация требований;
	Backend-разработчик — серверная логика и API;
	Data Scientist — внедрение и обучение нейронных сетей;
	Frontend-разработчик — создание пользовательского интерфейса;
	Руководитель проекта — координация, контроль сроков и отчётность.
 
Рисунок 12 - Организационная структура проектной команды
Управление рисками
Чтобы обеспечить стабильность проекта, была проведена оценка рисков с определением вероятности их возникновения и возможного ущерба. Выявлены основные риски:
	Отставание от планового графика;
	Проблемы при объединении компонентов системы;
	Ошибки в алгоритмах машинного обучения;
	Недостаточная производительность системы.
Для каждого риска разработаны превентивные меры и способы минимизации последствий:
	Создание временного и ресурсного резерва;
	Проведение модульного тестирования;
	Применение проверенных библиотек и фреймворков;
	Постоянная проверка получаемых результатов.
 
4 Экономическое обоснование
	 Расчёт себестоимости программного продукта
Для определения эффективности внедрения программного продукта необходимо рассчитать экономические затраты на производство и его себестоимость.
Целью планирования себестоимости проведения разработки программного продукта является экономически обоснованное определение величины затрат на ее выполнение. В плановую себестоимость программного продукта включаются все затраты, связанные с ее выполнением, независимо от источника финансирования. Определение затрат на разработку производится путем калькуляции плановой себестоимости.
Рассчитанные показатели себестоимости позволяют оценить необходимые затраты и могут быть использованы в случае коммерческой реализации данного проекта.
Калькуляция (лат. «calculatio», «calculo» - считаю, подсчитываю) - вычисление себестоимости единицы продукции. Себестоимость представляет собой сумму затрат на разработку, расходов на содержание и эксплуатацию оборудования, используемого при создании программного продукта. Расчет себестоимости осуществляется методом прямого счета, который сводится к составлению калькуляции на единицу разрабатываемой продукции или выполненной работы. 
Расчет себестоимости произведем по следующим видам затрат:
	основные и вспомогательные материалы (материальные затраты)
	 затраты на оплату труда разработчика
	отчисления на социальные нужды разработчика
	амортизационные отчисления
	расходы на содержание и эксплуатацию ПЭВМ
	прочие затраты
Расчёт потребности в основных и вспомогательных материалах
Потребность в основных и вспомогательных материалах рассчитывается на основе разработанной технологии процесса, где берем наименование и нормы расходов материалов. Материальные затраты (МЗ) для разработки программного продукта складываются из затрат на расходные материалы, которые берутся по факту и определяются исходя из реальной стоимости.
Поскольку создаваемый программный продукт не материален, то основная доля затрат приходится на оплату труда участников проекта. Однако для разработки системы мониторинга на основе нейронных сетей необходим постоянный доступ к интернету для изучения современных подходов, загрузки библиотек машинного обучения, работы с облачными сервисами и тестирования системы.
Использовалось программное обеспечение, имеющееся в ГБПОУ «Челябинский энергетический колледж им. С.М. Кирова», поэтому лицензия не приобреталась.
Таблица 13 - Расчёт потребности в основных и вспомогательных материалах
Наименование	Цена за единицу, руб.	Норма расхода	Затраты, руб.
Интернет 	500	28 дней	466,67
Итого: 	466,67
Расчет затрат на интернет производился исходя из необходимости обеспечения стабильного высокоскоростного подключения на период разработки системы мониторинга. Для работы с нейронными сетями требуется доступ к специализированным библиотекам, онлайн-документации, облачным вычислительным ресурсам и репозиториям с открытым исходным кодом.
Расчёт численности персонала и оплаты труда
Анализируя заработную плату в данной сфере, можно сделать следующий вывод. Новичкам в штате редко платят больше 30-40 тысяч рублей, middle разработчики могут рассчитывать на 60-70 тысяч, а более опытные специалисты получают больше 100 тысяч в месяц. На фрилансе средних показателей нет. В хорошие месяцы доход фрилансера со средним уровнем может составлять и 200-300 тысяч рублей.
В данном проекте при расчёте заработной платы специалиста, тарифная ставка рассчитывается исходя из МРОТ и рабочего времени 144 часа. МРОТ на 01.01.2025 г. составил 22440 руб.
Районный коэффициент - показатель, используемый при расчете заработной платы работника за труд в сложных климатических условиях. Оплачивается в зависимости от нахождения региона, в Челябинской области действует Уральский коэффициент, Rк = 0,15 который утвержден правительством Российской Федерации. Таким образом, МРОТ с учетом Уральского коэффициента составляет 25806 руб.
Часовая тарифная ставка: 25806 / 144 = 179,20 руб./час.
Таблица 14 - Состав разработчиков программного продукта
Профессия работника	Численность, чел.	Един. измерения руб. чел.-ч	Тарифная ставка
Программист 	1	руб./чел.-ч	179,20
Необходимо рассчитать трудоемкость работ по разработке программного продукта (ПП). Трудоемкость, показывает количество времени, затраченное на разработку единицы продукции. 
Трудоемкость каждого вида работ рассчитывается на основе экспертных оценок, исходя из минимальных и максимальных затрат времени на выполнение работ по формуле (1):
t_p=(〖3t〗_min+〖2t〗_max)/5,					(1)
Таблица 15 - Трудоемкость выполнения работ в часах
Наименование работ	tmin	tmax	tp
1 Разработка технического задания	6	10	7,6
2 Анализ технического задания и сбор данных	45	53	48,2
3 Реализация	90	116	100,4
4 Отладка и тестирование программы 	18	25	20,8
5 Подготовка документации	6	12	8,4
Итого (общие трудозатраты)	165	216	185,4
Заработная плата исполнителя работ по созданию ПП складывается из основной заработной платы (ОЗПр) разработчика за время разработки ПП и дополнительной заработной платы (ДЗПр).
ЗПобщ.р=ОЗПр+ДЗПр,					(2)
Основная заработная плата программиста за период разработки программы:
ОЗПр=ЧТСр*ТПр,	        			            	(3)
ОЗПр = 179,20 × 185,4 = 33227,28 руб.
Дополнительная заработная плата включает выплаты, предусмотренные действующим законодательством за неотработанное время. Рассчитывается в процентах от основной заработной платы (13%):
ДЗПр = 33227,28 × 13% = 4319,55 руб.
Заработная плата исполнителя работ по созданию ПП:
ЗПобщ.р = 33227,28 + 4319,55 = 37546,83 руб.
Страховые взносы во внебюджетные организации – это обязательные отчисления по установленным законодательством нормам. С 2010 года Единый социальный налог (ЕСН) заменен уплатой взносов в Пенсионный фонд Российской Федерации, Фонд социального страхования Российской Федерации, фонд обязательного медицинского страхования. Начиная с 01.01.2023, ПФР и ФСС России объединены в Фонд пенсионного и социального страхования Российской Федерации (СФР).
Отчисления на социальные нужды (ОСНр) устанавливаются в процентах от расходов на оплату труда (30%):
ОСНр = 37546,83 × 30% = 11264,05 руб.
Расчёт стоимости и амортизационных отчислений основных средств
Амортизация – перенесение по частям стоимости основных средств и нематериальных активов по мере их физического или морального износа на стоимость производимой продукции (работ, услуг). Амортизируемым имуществом согласно п. 1 ст. 256 НК РФ считается имущество со сроком полезного использования более 12 месяцев и первоначальной стоимостью более 100 000 рублей.
В нашем случае, учетная политика позволяет учесть в составе основных средств любой актив вне зависимости от его стоимости. При этом учет основных средств стоимостью менее 100 000 руб. ничем не будет отличаться от учета объектов, имеющих более высокую стоимость.
Согласно Классификатору, компьютерам присвоена вторая амортизационная группа. Разные виды компьютеров объединены кодом 320.26.2, его расшифровка – «Компьютеры и периферийное оборудование». Срок полезного использования компьютера по классификатору основных средств – 3 года, свыше этого периода амортизация не начисляется.
Годовая норма амортизации:
На =  (1 )/Тн  * 100% ,                                               (4)
На = 1 / 3 × 100% = 33,33%
Таблица 16 - Расчет амортизационных отчислений
Наим. оборудования	Первонач. стоимость оборудов., руб.	Норма аморт., %	Годовая сумма амор. отчис, руб.	Ном. фонд раб. времени, час.	Ст-сть 1 маш-часа работы, руб.	Факт время исп. оборуд. час.	Амортиз. отч, руб.
Компьютер	69000,00	33,33	22999,77	1774,40	12,96	185,4	2403,34
Итого	2403,34
Расчет расходов на содержание и эксплуатацию
Основой для расчета расходов на содержание и эксплуатацию ПЭВМ относящихся к данной ПП являются:
Затраты на электроэнергию складываются из:
	затраты на силовую электроэнергию
	затраты на электроэнергию, которая идет на освещение
Затраты на силовую электроэнергию определяются по формуле:
Зс.эл = Мпр * Тпр * СкВт/ч ,                          	        (5)
где Мпр - электроэнергия, потребляемая вычислительной машиной, кВт/час (компьютер – 0,36 кВт/час);
Сквт/ч - стоимость 1 кВт/час (цена электроэнергии для населения установлена постановлением министерства тарифного регулирования и энергетики Челябинской области от 28.11.2023 года № 105/1 и составляет с 1 июля 2024 года 4,24 рубля за кВт/ч).
Зс.эл = 0,36 × 185,4 × 4,24 = 283,05 руб.
Затраты на электроэнергию, которая идет на освещение:
Зосв = Тпр * Мосв * СкВт/ч ,                                     (6)
где Мосв - суммарная мощность, которая идет на освещение, кВт/час (принимается 0,5 кВт/час).
Зосв = 185,4 × 0,5 × 4,24 = 393,25 руб.
Общие затраты на электроэнергию:
Зэл = Зс.эл + Зосв ,                                               (7)
Зэл = 283,05 + 393,25 = 676,30 руб.
Стоимость ремонта оборудования за год определяется в процентах от балансовой стоимости ПЭВМ:
Зрем.г = Соб * Нр / 100% ,				 (8)
Зрем.г = 69000,00 × 4% = 2760,00 руб.
Стоимость ремонта оборудования за период разработки ПП:
Зрем =  (Зрем.г)/(Фн * Тпр)  ,		  			   (9)
Зрем = 2760,00 / 1774,40 × 185,4 = 288,34 руб.
Расходы на содержание и эксплуатацию ПЭВМ за период разработки ПП:
Рс.э = Зэл + Зрем	,				   (10)
Рс.э = 676,30 + 288,34 = 964,64 руб.
Расчет прочих расходов
Прочие затраты при разработке ПП (составляют 7% от суммы остальных затрат). Прочие расходы – затраты, косвенно связанные с производством. К прочим затратам можно отнести административные расходы, затраты на управление проектом, расходы на обеспечение информационной безопасности и другие накладные расходы.
Пз = (МЗ+ЗПобщ.р+ОСНр+Ао+Рс.э)* ((5+9)/2),   		 (11)
Пз = (466,67 + 37546,83 + 11264,05 + 2403,34 + 964,64) × 7% = 3665,17 руб.
Расчёт себестоимости программного продукта
Себестоимость — это сумма всех затрат на производство и реализацию единицы продукции.
Итого себестоимость ПП составит:
С=МЗ+ЗПобщ.р+ОСНр+Ао+Рс.э+Пз,   		 (12)
С = 466,67 + 37546,83 + 11264,05 + 2403,34 + 964,64 + 3665,17 = 56310,70 руб.
Таблица 17 - Калькуляция себестоимости программного продукта
Наименование статей затрат	Сумма, руб.	Структура, %
	Материальные затраты	466,67	0,83
	Основная заработная плата	33227,28	59,01
	Дополнительная заработная плата	4319,55	7,67
	Отчисления на социальные мероприятия	11264,05	20,01
	Расходы на амортизацию оборудования 	2403,34	4,27
	Расходы на содержание и эксплуатацию ПЭВМ 	964,64	1,71
	Прочие затраты	3665,17	6,51
	Себестоимость программного продукта	56310,70	100,00
Себестоимость созданного программного продукта составляет 56310,70 руб. Так как оплата труда не производилась, то реальная (фактическая) себестоимость, отражающая общую сумму фактически использованных затрат на производство и реализацию программного продукта, определяется по формуле:
Сф=С-(ЗПобщ.р+ОСНр+Пз),			    (13)
Сф = 56310,70 - (37546,83 + 11264,05 + 3665,17) = 3834,65 руб.
Таким образом, полная себестоимость программного продукта составила 56310,70 руб., реальная (фактическая) себестоимость составила 3834,65 руб.
	 Расчёт экономической эффективности программного продукта
Эффективность – одно из наиболее общих экономических понятий, это характеристика системы с точки зрения соотношения затрат и результатов ее функционирования. К основным показателям экономической эффективности относятся: экономический эффект, коэффициент экономической эффективности капитальных вложений, срок окупаемости капитальных вложений и др.
Экономический эффект – результат внедрения какого-либо мероприятия, выраженный в стоимостной форме, в виде экономии от его осуществления.
Основными источниками экономии от использования программного продукта в вычислительных процессах и процессах создания новых систем мониторинга являются:
	повышение технического уровня производства
	снижение трудоемкости выполняемых работ
	повышение надежности функционирования техники
	увеличение объемов и сокращение сроков переработки информации
	снижение затрат на ранее используемое программное обеспечение для каждого ПК
	повышение производительности труда программистов и других специалистов
	возможное уменьшение (высвобождение) численности персонала и другие
Один из способов расчета эффективности, это разница затрат базового (до внедрения программного обеспечения) и нового вариантов (с использованием программного обеспечения).
Значение ожидаемого годового экономического эффекта от использования программного продукта определяется по формуле:
Э=3б-3и,                                                     (14)
где 3б - затраты по базовому варианту, руб./год;
3и - затраты при использовании программного обеспечения, руб./год.
Рассчитываем затраты по базовому варианту, используя формулу:
3б= СЧп* Тр* (1/dЗП), руб./год,			              (15)
где СЧп - часовая средняя заработная плата (179,20 руб./час);
Тр - трудоёмкость решаемой задачи;
dЗП - доля заработной платы в общей смете затрат организации (70%).
Для решения задач мониторинга без использования нейронных сетей необходимо примерно 30% действующего фонда рабочего времени:
Тр=Фн*0,3, час/год,                                            (16)
Тр = 1774,40 × 0,3 = 532,32 час/год
Подставляя в формулу значения находим затраты по базовому варианту:
3б = 179,20 × 532,32 × (1 / 70%) = 136273,92 руб./год
Определяем затраты при использовании программы используя формулу:
3и=((Фн*См+С))/Тс  , руб./год,                                         (17)
где См - стоимость одного машинного часа (15,96 руб./час);
С – сметная стоимость программного продукта (91292,42 руб.);
Тс - срок службы программного обеспечения (5 лет).
3и = (1774,40 × 12,96 + 56310,70) / 5 = 15837,25 руб./год
Рассчитаем ожидаемый годовой экономический эффект от использования программного продукта:
Э = 136273,92 - 15837,25 = 120436,67 руб./год
Определим срок окупаемости затрат, используя формулу:
Ток=С/Э  , год,                                                     (18)
где Ток – срок окупаемости затрат;
Э – экономическая эффективность, руб./год.
Ток = 56310,70 / 120436,67 = 0,467 год.
Срок окупаемости затрат составит 0,467 года, то есть после истечения данного срока проект начнет приносить прибыль.
Определим расчетный коэффициент экономической эффективности от вложенных средств, используя формулу:
Ер=1/Ток  ,                                                     (19)
где Ер - расчетный коэффициент экономической эффективности затрат.
Ер = 1 / 0,467 = 2,14
Эффективность капитальных вложений достигается при условии, если расчетный коэффициент эффективности (Ер) больше либо равен нормативному коэффициенту эффективности (Ен), т.е. Ер>=Ен. (Ен) - нормативный коэффициент экономической эффективности. Этот индекс показывает, какой может быть минимально допустимая эффективность в той или иной сфере. В сфере торговли этот показатель равен 25% (0,25).
(Ер) – показатель, характеризующий экономию, приходящуюся на один рубль дополнительных капитальных вложений.
Внедряемый вариант признается более выгодным при условии, если Ер>=Ен.
Поскольку Ер (1,23) > Ен (0,25), проект является экономически эффективным.
Эффективность использования разработанной системы мониторинга на основе нейронных сетей трудно поддается оценке ввиду того, что варьируется в зависимости от сферы применения, использования данного продукта в составе других программ и систем.
Экономическая эффективность системы мониторинга на основе нейронных сетей заключается в значительном сокращении времени, затрачиваемого специалистами на анализ данных и выявление аномалий. Автоматизация процессов мониторинга позволяет операторам сосредоточиться на более важных задачах, связанных с принятием стратегических решений и оптимизацией контролируемых процессов.
Внедрение системы мониторинга на основе нейронных сетей приводит к радикальному изменению процесса контроля. Специалисты получают мгновенный доступ к результатам анализа больших объемов данных, что позволяет повысить оперативность принятия решений, значительно улучшить качество мониторинга и ускорить процесс реагирования на критические события.
Именно показатель сокращения времени анализа данных является одним из главных составляющих успешного внедрения программного продукта в практическую деятельность конкретного предприятия.
Таким образом, произведенный экономический анализ эффективности создания и эксплуатации программного продукта доказывает целесообразность его использования.

 
5 Охрана труда и техника безопасности информационного отдела
Охрана труда в информационном отделе предприятия направлена на создание безопасных и комфортных условий работы для специалистов, занятых в разработке, сопровождении и эксплуатации программных решений. Работа сотрудников данного подразделения характеризуется высокой умственной нагрузкой, длительным пребыванием в положении сидя, постоянной работой за компьютером, а также эксплуатацией различной вычислительной и сетевой техники.
Помещение, в котором организован информационный отдел, оборудовано в соответствии с санитарно-гигиеническими требованиями. Освещённость рабочих мест достигает нормативных значений — не менее 500 лк, обеспечивается как за счёт естественного, так и за счёт равномерно распределённого искусственного освещения. Рабочие места оснащены эргономичной мебелью: кресла имеют регулировку по высоте, поясничную опору и возможность фиксации положения, а столы позволяют правильно расположить монитор и клавиатуру. Расстояние от глаз до экрана составляет 60–70 см, центр экрана находится на уровне глаз или немного ниже
Температурный режим в помещении поддерживается в пределах 22–24°С, а относительная влажность воздуха составляет 40–60%, что соответствует требованиям к микроклимату. Периодически проводится проветривание и влажная уборка, а также контроль уровня шума и пылевоздействия. Все сотрудники обеспечены необходимыми условиями для соблюдения режима труда и отдыха. В соответствии с санитарными нормами каждые 50–60 минут работы за компьютером предусматриваются технологические перерывы продолжительностью 5–10 минут для снятия зрительного и мышечного напряжения.
С целью электробезопасности всё оборудование подключено через сертифицированные сетевые фильтры и источники бесперебойного питания с заземлением. Проведение профилактических осмотров техники осуществляется в установленные сроки, а сотрудники проходят инструктаж по электробезопасности и действиям при возникновении аварийных ситуаций. Эксплуатация оборудования с повреждённой изоляцией, оголёнными проводами или признаками неисправности категорически запрещается.
Организация пожарной безопасности обеспечена наличием первичных средств пожаротушения — огнетушителей порошкового типа, размещённых в доступных местах. В отделе установлены автоматические системы обнаружения возгораний, имеются планы эвакуации и указатели направлений движения к выходу. Регулярно проводятся инструктажи по действиям при пожаре и тренировочные эвакуации персонала. Использование нагревательных бытовых приборов, а также курение в рабочих зонах исключены.
В целях охраны труда в целом и предупреждения профессиональных заболеваний, предприятие обеспечивает организацию медосмотров для сотрудников, предоставляет возможность прохождения обучения по охране труда, а также реализует мероприятия по профилактике переутомления и стрессовых состояний. Информационный отдел относится к категории помещений с пониженной опасностью, однако все правила техники безопасности и охраны труда соблюдаются в полном объёме.

 
Заключение
Дипломный проект на тему «Реализация мониторинга на основе нейронных сетей» направлен на создание программы, которая может автоматически обнаруживать и анализировать вредоносные материалы в социальных сетях. Наличие этой темы позволяет более эффективно использовать решения в области информационной безопасности из-за скорости роста цифровых данных.
В результате разработанная система полностью соответствует заявленным требованиям, демонстрирует высокую точность анализа, масштабируемость, надёжность и пригодность к внедрению в реальную эксплуатацию. Она может быть использована в аналитических центрах, службах цифровой безопасности, государственных структурах и других организациях, заинтересованных в эффективном контроле информационных потоков.
Таким образом, в ходе дипломного проектирования достигнута основная цель — создана интеллектуальная система мониторинга, обеспечивающая автоматическое выявление угроз в цифровой среде с применением технологий искусственного интеллекта и современных принципов разработки программного обеспечения.
 
Библиографический список
	ГОСТ 19.201–78. Единая система программной документации. Техническое задание. Требования к содержанию и оформлению. — М.: Изд-во стандартов, 1979.
	ГОСТ Р 57580.1–2017. Безопасность финансовых (операционных) данных. Защита информации. Общие требования.
	ГОСТ 34.201–89. Информационная технология. Комплекс стандартов на автоматизированные системы. Виды, комплектность и обозначения документов при создании АС.
	"Налоговый кодекс РФ (часть вторая)" от 05.08.2000 № 117-ФЗ (ред. от 2025). Ст. 256, 425
	Грибов В.Д Экономика организации: учебник. – М.: КНОРУС, 2022;
	Савельев И.В Экономика IT-проектов: учебное пособие. – СПб.: Лань, 2020
	Пермякова О.К. «Методические рекомендации по выполнению курсовой работы по дисциплине ОП.07 Экономика отрасли 09.02.07 информационные системы и программирование». ЧЭиК, 2025
	Ian Sommerville. Software Engineering. — 10th ed. — Pearson, 2021.
	Шнайдер, Б. Прикладная криптография: протоколы, алгоритмы, исходные тексты на языке C / Б. Шнайдер. — М.: Триумф, 2002. — 832 с.
	Bishop, M. Computer Security: Art and Science. — Boston: Addison-Wesley, 2003.
	Géron, A. Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow. — 2nd ed. — O'Reilly Media, 2021.
	Tanenbaum, A. S., Van Steen, M. Distributed Systems: Principles and Paradigms. — 2nd ed. — Pearson, 2024.
	Васильев, А. Н. Основы построения распределённых информационных систем. — СПб.: БХВ-Петербург, 2023.
	 Лаборатория Касперского. Отчет по киберугрозам в социальных сетях. — 2023. URL: https://www.kaspersky.ru/blog/social-media-threats-report/ (Дата обращения: 31.01.2005)
	 TensorFlow Documentation (Электронный ресурс). — URL: https://www.tensorflow.org (Дата обращения: 31.01.2005).
	 Документация PostgreSQL. URL: https://www.postgresql.org/docs/ (Дата обращения: 3.02.2005)
	Документация MongoDB. URL: https://www.mongodb.com/docs/ (Дата обращения: 25.02.2005)
	 Документация Node.js. URL: https://nodejs.org/ (Дата обращения: 23.03.2005)
	 Документация React. URL: https://reactjs.org/ (Дата обращения: 23.03.2005)
	Документация Apache Kafka. URL: https://kafka.apache.org/ (Дата обращения: 04.04.2005)
	Hugging Face Model Hub: ruBERT-Toxicity. URL: https://huggingface.co/cointegrated/rubert-tiny-toxicity (Дата обращения: 15.05.2005)
	Docker и Kubernetes. Официальная документация. URL: https://docs.docker.com/ и https://kubernetes.io/docs/ (Дата обращения: 16.05.2005)

 
Приложение А
Структура базы данных
 
Рисунок А.1 – Структура база данных системы 
Приложение Б
Диаграмма архитектуры системы
 
Рисунок Б.1 – Диаграмма архитектуры системы
 
Приложение В
Листинг программы
Листинг программы 
Программные компоненты реализованы с использованием стека PostgreSQL, MongoDB, Node.js, Python и React. Ниже приведены ключевые элементы программной реализации системы мониторинга на основе нейросетей.
Backend: Node.js + Express (API Gateway) 
	файл server.js
const express = require('express');
const app = express();
const monitoringRoutes = require('./routes/monitoring');
app.use(express.json());
app.use('/api/monitoring', monitoringRoutes);
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
	файл: routes/monitoring.js
const express = require('express');
const router = express.Router();
const { analyzeMessage } = require('../services/analyzer');
router.post('/analyze', async (req, res) => {
  const result = await analyzeMessage(req.body);
  res.json(result);
});
module.exports = router;
Сервис анализа угроз: Python + PyTorch
	Файл: threat_analyzer.py
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
class ThreatAnalyzer:
    def __init__(self, model_path='cointegrated/rubert-tiny-toxicity'):
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)
        self.model = AutoModelForSequenceClassification.from_pretrained(model_path)
        self.model.eval()
    def analyze(self, text):
        inputs = self.tokenizer(text, return_tensors='pt', truncation=True)
        with torch.no_grad():
            outputs = self.model(**inputs)
        scores = torch.nn.functional.softmax(outputs.logits, dim=-1)
        return scores.tolist()
# Пример использования
if __name__ == '__main__':
    analyzer = ThreatAnalyzer()
    print(analyzer.analyze("Это угрожающее сообщение"))
Клиентская часть: React + Redux + Socket.io
	Файл: App.tsx
import React, { useEffect } from 'react';
import io from 'socket.io-client';
const socket = io('http://localhost:3000');
const App = () => {
  useEffect(() => {
    socket.on('threat_detected', (data) => {
      alert(`Обнаружена угроза: ${data.text}`);
    });
  }, []);
  return (
    <div>
      <h1>Matrix AI Monitoring Dashboard</h1>
    </div>
  );
};
export default App;
Конфигурация БД: PostgreSQL и MongoDB
	Файл: schema.sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255),
  password TEXT,
  role VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE threats (
  id SERIAL PRIMARY KEY,
  message_id UUID,
  type VARCHAR(100),
  threat_score NUMERIC(3,2),
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
MongoDB Пример документа:
{
  "text": "Угроза безопасности",
  "platform": "Telegram",
  "attachments": [],
  "metadata": {
    "location": "RU",
    "timestamp": "2025-06-01T11:00:00Z"
  }
}
